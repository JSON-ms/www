from flask import Flask, request, jsonify, send_from_directory, abort
import os
import base64
import json
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

app = Flask(__name__)

# Configurations: You can change
secret_key = ''
cypher_key = ''
access_control_allow_origin = 'https://json.ms'
public_file_path = 'https://[YOUR_SERVER_DOMAIN_NAME]/files/'

# Function to handle errors and send appropriate HTTP response
def throw_error(code, body):
    return jsonify({'body': body}), code

# Function to generate a random hash of a given length
def generate_hash(length=10):
    return hashlib.sha256(get_random_bytes(length)).hexdigest()[:length]

# Function to decrypt encrypted data using the provided encryption key
def decrypt(encrypted_data, encryption_key):
    try:
        encrypted_data, iv = base64.b64decode(encrypted_data).split(b'::', 1)
        cipher = AES.new(encryption_key.encode(), AES.MODE_CBC, iv)
        decrypted_data = unpad(cipher.decrypt(encrypted_data), AES.block_size)
        return decrypted_data.decode()
    except Exception as e:
        return False

# CORS and HTTP Headers Configuration
@app.after_request
def after_request(response):
    response.headers.add("Access-Control-Allow-Origin", access_control_allow_origin)
    response.headers.add("Access-Control-Allow-Methods", "GET, POST, OPTIONS, DELETE")
    response.headers.add("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Jms-Api-Key, X-Jms-Interface-Hash")
    response.headers.add("Access-Control-Allow-Credentials", "true")
    return response

# Handle OPTIONS request
@app.route('/', methods=['OPTIONS'])
def handle_options():
    return '', 204

# API Key Validation and Request Handling
@app.before_request
def validate_api_key():
    if 'X-Jms-Api-Key' not in request.headers:
        return throw_error(401, 'API Secret Key not provided')

    api_key = request.headers['X-Jms-Api-Key']
    if decrypt(api_key, cypher_key) != secret_key:
        return throw_error(401, 'Invalid API Secret Key')

# File upload and directory setup
private_path = os.path.join(os.path.dirname(__file__), 'private')
data_path = os.path.join(private_path, 'data')
interface_path = os.path.join(private_path, 'interfaces')
upload_dir = os.path.join(private_path, 'files')

os.makedirs(data_path, exist_ok=True)
os.makedirs(interface_path, exist_ok=True)
os.makedirs(upload_dir, exist_ok=True)

server_settings = {
    "uploadMaxSize": os.getenv('UPLOAD_MAX_SIZE', '2M'),
    "postMaxSize": os.getenv('POST_MAX_SIZE', '8M'),
    'publicUrl': public_file_path,
}

# Handling GET request: Retrieve JSON Data
@app.route('/', methods=['GET'])
def get_json_data():
    hash_key = request.args.get('hash')
    data_file_path = os.path.join(data_path, f"{hash_key}.json")
    interface_file_path = os.path.join(interface_path, f"{hash_key}.json")

    data = {}
    interface = {}

    if os.path.exists(data_file_path):
        with open(data_file_path, 'r') as f:
            data = json.load(f)

    if os.path.exists(interface_file_path):
        with open(interface_file_path, 'r') as f:
            interface = json.load(f)

    return jsonify({
        'data': data,
        'interface': interface,
        'settings': server_settings,
    })

# Handling file upload: POST request
@app.route('/', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return throw_error(400, 'No file part')

    file = request.files['file']
    if file.filename == '':
        return throw_error(400, 'No selected file')

    interface_hash = request.headers.get('X-Jms-Interface-Hash')
    if not interface_hash:
        return throw_error(400, 'Interface hash not provided.')

    # File upload validation
    try:
        filename = file.filename
        file_ext = os.path.splitext(filename)[1]
        dest_filename = f"{interface_hash}-{generate_hash(16)}{file_ext}"
        dest_path = os.path.join(upload_dir, dest_filename)
        file.save(dest_path)

        internal_path = os.path.relpath(dest_path, upload_dir)
        return jsonify({
            'success': True,
            'publicPath': public_file_path + internal_path,
            'internalPath': internal_path,
        })
    except Exception as e:
        return throw_error(400, f'There was an error uploading the file: {str(e)}')

# Create/Update JSON: POST request
@app.route('/json', methods=['POST'])
def create_update_json():
    try:
        data = request.get_json()
        if not data or 'hash' not in data:
            return throw_error(400, 'Invalid JSON')

        hash_key = data['hash']
        data_file_path = os.path.join(data_path, f"{hash_key}.json")
        interface_file_path = os.path.join(interface_path, f"{hash_key}.json")

        with open(data_file_path, 'w') as f:
            json.dump(data.get('data', {}), f)

        with open(interface_file_path, 'w') as f:
            json.dump(data.get('interface', {}), f)

        return jsonify(data)
    except Exception as e:
        return throw_error(400, f'Error processing JSON: {str(e)}')

if __name__ == '__main__':
    app.run(debug=True)
