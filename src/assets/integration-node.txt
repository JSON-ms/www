const express = require('express');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const multer = require('multer');
const app = express();

app.use(express.json());

// Configurations: You can change
const secretKey = '';
const cypherKey = '';
const accessControlAllowOrigin = 'https://json.ms';
const publicFilePath = 'https://[YOUR_SERVER_DOMAIN_NAME]/files/';

// Encryption and decryption functions
function generateHash(length = 10) {
    return crypto.randomBytes(length).toString('hex').substring(0, length);
}

function decrypt(encryptedData, encryptionKey) {
    const parts = Buffer.from(encryptedData, 'base64').toString().split('::');
    if (parts.length !== 2) return false;
    const [encrypted, iv] = parts;
    const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(encryptionKey), Buffer.from(iv, 'hex'));
    let decrypted = decipher.update(Buffer.from(encrypted, 'base64'), 'binary', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
}

// Middleware to handle CORS and headers
app.use((req, res, next) => {
    res.setHeader("Access-Control-Allow-Origin", accessControlAllowOrigin);
    res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS, DELETE");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Jms-Api-Key, X-Jms-Interface-Hash");
    res.setHeader("Access-Control-Allow-Credentials", "true");
    res.setHeader('Content-Type', 'application/json');
    next();
});

// Handle OPTIONS request
app.options('*', (req, res) => res.sendStatus(204));

// Error handler function
function throwError(code, body) {
    return res.status(code).json({ body });
}

// File Upload Configuration using Multer
const upload = multer({ dest: 'private/files/' });

// Directory Paths
const privatePath = path.join(__dirname, 'private');
const dataPath = path.join(privatePath, 'data');
const interfacePath = path.join(privatePath, 'interfaces');
const uploadDir = path.join(privatePath, 'files');

// Ensure directories exist
if (!fs.existsSync(dataPath)) fs.mkdirSync(dataPath, { recursive: true });
if (!fs.existsSync(interfacePath)) fs.mkdirSync(interfacePath, { recursive: true });
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

// Server settings
const serverSettings = {
    uploadMaxSize: '2MB',
    postMaxSize: '8MB',
    publicUrl: publicFilePath,
};

// Validate API Key from request headers
app.use((req, res, next) => {
    const apiKey = req.headers['x-jms-api-key'];
    if (!apiKey) {
        return throwError(401, 'API Secret Key not provided');
    }
    if (decrypt(apiKey, cypherKey) !== secretKey) {
        return throwError(401, 'Invalid API Secret Key');
    }
    next();
});

// GET request to retrieve JSON content
app.get('/', (req, res) => {
    const hashKey = req.query.hash;
    const dataFilePath = path.join(dataPath, `${hashKey}.json`);
    const interfaceFilePath = path.join(interfacePath, `${hashKey}.json`);

    let data = {};
    let interface = {};

    if (fs.existsSync(dataFilePath)) {
        data = JSON.parse(fs.readFileSync(dataFilePath, 'utf-8'));
    }

    if (fs.existsSync(interfaceFilePath)) {
        interface = JSON.parse(fs.readFileSync(interfaceFilePath, 'utf-8'));
    }

    res.json({
        data,
        interface,
        settings: serverSettings,
    });
});

// POST request to upload a file
app.post('/', upload.single('file'), (req, res) => {
    const interfaceHash = req.headers['x-jms-interface-hash'];

    if (!interfaceHash) {
        return throwError(400, 'Interface hash not provided.');
    }

    if (req.file) {
        const fileExt = path.extname(req.file.originalname);
        const destFileName = `${interfaceHash}-${generateHash(16)}${fileExt}`;
        const destPath = path.join(uploadDir, destFileName);

        fs.renameSync(req.file.path, destPath);
        const internalPath = path.relative(uploadDir, destPath);

        res.json({
            success: true,
            publicPath: `${publicFilePath}${internalPath}`,
            internalPath,
        });
    } else {
        throwError(400, 'No file uploaded.');
    }
});

// POST request to create/update JSON content
app.post('/json', (req, res) => {
    const data = req.body;

    if (!data || !data.hash) {
        return throwError(400, 'Invalid JSON');
    }

    const hashKey = data.hash;
    const dataFilePath = path.join(dataPath, `${hashKey}.json`);
    const interfaceFilePath = path.join(interfacePath, `${hashKey}.json`);

    try {
        fs.writeFileSync(dataFilePath, JSON.stringify(data.data, null, 2));
        fs.writeFileSync(interfaceFilePath, JSON.stringify(data.interface, null, 2));

        res.json(data);
    } catch (error) {
        return throwError(400, `Error writing JSON: ${error.message}`);
    }
});

// Start server
const port = process.env.PORT || 3000;
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
